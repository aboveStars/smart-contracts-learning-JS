{
  "address": "0xF36F28c92B8D90a55f863f3eE5c5437Cd6aB5DBF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "intervall",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NOTOPEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffle_state_in_number",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalanceOfContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b14fd8c3f8de70a6aa654652cde79f44431a5d0b007e63da4134ea38eb5b316",
  "receipt": {
    "to": null,
    "from": "0xAE8dC4c95CCc79b39445fe9BD457FA22dbE87Ae7",
    "contractAddress": "0xF36F28c92B8D90a55f863f3eE5c5437Cd6aB5DBF",
    "transactionIndex": 129,
    "gasUsed": "1267605",
    "logsBloom": "0x
    "blockHash": "0xd08b98915def588c76cf2d3bbe3bd31d6edd80cbab8b53a084c6edfd07784233",
    "transactionHash": "0x1b14fd8c3f8de70a6aa654652cde79f44431a5d0b007e63da4134ea38eb5b316",
    "logs": [],
    "blockNumber": 8250628,
    "cumulativeGasUsed": "20704338",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "100000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "8207",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "0543f1c0be0b1c529320578185cf1fa9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"intervall\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NOTOPEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffle_state_in_number\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceOfContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that chainlink keeper nodes call... they look for the 'upkeepNeeded' to return true. following shoold be true in order to true: 1. Time interval passed. 2. at least 1 player 3. subscription is funded with LINK 4. Lottery shold be in open state.\"}},\"title\":\"A sample of Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// imports...\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n// errors...\\nerror Raffle__NotEnoughFee();\\nerror Raffle__TransferFailed();\\nerror Raffle__NOTOPEN();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 playerNumber,\\n    uint256 raffle_state_in_number\\n);\\n\\n/** @title A sample of Raffle Contract\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Types */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordiantor;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_gasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /* Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2, // done\\n        uint256 entranceFee, // done\\n        bytes32 gasLane, // done\\n        uint64 subscriptionId, // done\\n        uint32 callbackGasLimit, // done\\n        uint256 intervall\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordiantor = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_gasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = intervall;\\n    }\\n\\n    /* Functions */\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughFee();\\n        }\\n\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NOTOPEN();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that chainlink keeper nodes call...\\n     * they look for the 'upkeepNeeded' to return true.\\n     * following shoold be true in order to true:\\n     * 1. Time interval passed.\\n     * 2. at least 1 player\\n     * 3. subscription is funded with LINK\\n     * 4. Lottery shold be in open state.\\n     */\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    ) public override returns (bool upkeepNeeded, bytes memory /* performs data */) {\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\n        // (block.timestamp - last block timestamp) > interval\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        /*\\n         * Request random number\\n         * Once we get it, do something with it\\n         * 2 Tx process\\n         */\\n\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n\\n        uint256 requestId = i_vrfCoordiantor.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_gasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        emit WinnerPicked(s_recentWinner);\\n\\n        s_players = new address payable[](0);\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    /* View Functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getPlayersLength() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getBalanceOfContract() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x50215113fae329e1683f8b892221d36dda194eb5f112b877e8c3d5c5a44d4a9e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200193338038062001933833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161155d620003d660003960008181610896015261090401526000610755015260008181610732015261094201526000610711015260006106d50152600081816103ac01526104b10152600081816103e9015261043d015261155d6000f3fe6080604052600436106100f35760003560e01c80635f1b0fd81161008a578063cd61386d11610059578063cd61386d146102ea578063de3d9fb714610315578063e55ae4e814610340578063fd6673f51461037d576100f3565b80635f1b0fd81461022b5780636e04ff0d1461025657806391ad27b414610294578063c1c244e8146102bf576100f3565b80632cfcc539116100c65780632cfcc539146101a25780634585e33b146101ac578063473f1ddc146101d557806353a2c19a14610200576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632296888514610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610ccc565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610d5e565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f12565b6103e7565b005b34801561018357600080fd5b5061018c6104a7565b6040516101999190610ccc565b60405180910390f35b6101aa6104af565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610fc9565b61061e565b005b3480156101e157600080fd5b506101ea61080e565b6040516101f79190611057565b60405180910390f35b34801561020c57600080fd5b50610215610838565b6040516102229190610ccc565b60405180910390f35b34801561023757600080fd5b50610240610847565b60405161024d9190610ccc565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190611127565b610854565b60405161028b92919061120a565b60405180910390f35b3480156102a057600080fd5b506102a9610900565b6040516102b69190610ccc565b60405180910390f35b3480156102cb57600080fd5b506102d4610928565b6040516102e19190610ccc565b60405180910390f35b3480156102f657600080fd5b506102ff610932565b60405161030c9190610ccc565b60405180910390f35b34801561032157600080fd5b5061032a61093e565b604051610337919061125d565b60405180910390f35b34801561034c57600080fd5b5061036760048036038101906103629190611278565b610966565b6040516103749190611057565b60405180910390f35b34801561038957600080fd5b506103926109ad565b60405161039f9190610ccc565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104909291906112a5565b60405180910390fd5b6104a382826109b9565b5050565b600047905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610509576040517f046d209600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561051d5761051c610ce7565b5b600160149054906101000a900460ff16600181111561053f5761053e610ce7565b5b14610576576040517f5731c74000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061063860405180602001604052806000815250610854565b509050806106a75747600080549050600160149054906101000a900460ff16600181111561066957610668610ce7565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161069e939291906112ce565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106cc576106cb610ce7565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161079695949392919061135a565b6020604051808303816000875af11580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906113c2565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561086d5761086c610ce7565b5b600160149054906101000a900460ff16600181111561088f5761088e610ce7565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108c3919061141e565b119050600080600080549050119050600080471190508380156108e35750825b80156108ec5750815b80156108f55750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061097b5761097a611452565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109d4576109d3611452565b5b60200260200101516109e691906114b0565b905060008082815481106109fd576109fc611452565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9190611512565b60006040518083038185875af1925050503d8060008114610ace576040519150601f19603f3d011682016040523d82523d6000602084013e610ad3565b606091505b5050905080610b0e576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610b8e57610b8d610dcf565b5b604051908082528060200260200182016040528015610bbc5781602001602082028036833780820191505090505b5060009080519060200190610bd2929190610c0c565b506000600160146101000a81548160ff02191690836001811115610bf957610bf8610ce7565b5b0217905550426002819055505050505050565b828054828255906000526020600020908101928215610c85579160200282015b82811115610c845782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c2c565b5b509050610c929190610c96565b5090565b5b80821115610caf576000816000905550600101610c97565b5090565b6000819050919050565b610cc681610cb3565b82525050565b6000602082019050610ce16000830184610cbd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d2757610d26610ce7565b5b50565b6000819050610d3882610d16565b919050565b6000610d4882610d2a565b9050919050565b610d5881610d3d565b82525050565b6000602082019050610d736000830184610d4f565b92915050565b6000604051905090565b600080fd5b600080fd5b610d9681610cb3565b8114610da157600080fd5b50565b600081359050610db381610d8d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0782610dbe565b810181811067ffffffffffffffff82111715610e2657610e25610dcf565b5b80604052505050565b6000610e39610d79565b9050610e458282610dfe565b919050565b600067ffffffffffffffff821115610e6557610e64610dcf565b5b602082029050602081019050919050565b600080fd5b6000610e8e610e8984610e4a565b610e2f565b90508083825260208201905060208402830185811115610eb157610eb0610e76565b5b835b81811015610eda5780610ec68882610da4565b845260208401935050602081019050610eb3565b5050509392505050565b600082601f830112610ef957610ef8610db9565b5b8135610f09848260208601610e7b565b91505092915050565b60008060408385031215610f2957610f28610d83565b5b6000610f3785828601610da4565b925050602083013567ffffffffffffffff811115610f5857610f57610d88565b5b610f6485828601610ee4565b9150509250929050565b600080fd5b60008083601f840112610f8957610f88610db9565b5b8235905067ffffffffffffffff811115610fa657610fa5610f6e565b5b602083019150836001820283011115610fc257610fc1610e76565b5b9250929050565b60008060208385031215610fe057610fdf610d83565b5b600083013567ffffffffffffffff811115610ffe57610ffd610d88565b5b61100a85828601610f73565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061104182611016565b9050919050565b61105181611036565b82525050565b600060208201905061106c6000830184611048565b92915050565b600080fd5b600067ffffffffffffffff82111561109257611091610dcf565b5b61109b82610dbe565b9050602081019050919050565b82818337600083830152505050565b60006110ca6110c584611077565b610e2f565b9050828152602081018484840111156110e6576110e5611072565b5b6110f18482856110a8565b509392505050565b600082601f83011261110e5761110d610db9565b5b813561111e8482602086016110b7565b91505092915050565b60006020828403121561113d5761113c610d83565b5b600082013567ffffffffffffffff81111561115b5761115a610d88565b5b611167848285016110f9565b91505092915050565b60008115159050919050565b61118581611170565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111c55780820151818401526020810190506111aa565b60008484015250505050565b60006111dc8261118b565b6111e68185611196565b93506111f68185602086016111a7565b6111ff81610dbe565b840191505092915050565b600060408201905061121f600083018561117c565b818103602083015261123181846111d1565b90509392505050565b600067ffffffffffffffff82169050919050565b6112578161123a565b82525050565b6000602082019050611272600083018461124e565b92915050565b60006020828403121561128e5761128d610d83565b5b600061129c84828501610da4565b91505092915050565b60006040820190506112ba6000830185611048565b6112c76020830184611048565b9392505050565b60006060820190506112e36000830186610cbd565b6112f06020830185610cbd565b6112fd6040830184610cbd565b949350505050565b6000819050919050565b61131881611305565b82525050565b600061ffff82169050919050565b6113358161131e565b82525050565b600063ffffffff82169050919050565b6113548161133b565b82525050565b600060a08201905061136f600083018861130f565b61137c602083018761124e565b611389604083018661132c565b611396606083018561134b565b6113a3608083018461134b565b9695505050505050565b6000815190506113bc81610d8d565b92915050565b6000602082840312156113d8576113d7610d83565b5b60006113e6848285016113ad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142982610cb3565b915061143483610cb3565b925082820390508181111561144c5761144b6113ef565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114bb82610cb3565b91506114c683610cb3565b9250826114d6576114d5611481565b5b828206905092915050565b600081905092915050565b50565b60006114fc6000836114e1565b9150611507826114ec565b600082019050919050565b600061151d826114ef565b915081905091905056fea2646970667358221220d1f9505efb6e9247ec83cfe6440e549de852562bb2bb3a036dbc97609e43777264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80635f1b0fd81161008a578063cd61386d11610059578063cd61386d146102ea578063de3d9fb714610315578063e55ae4e814610340578063fd6673f51461037d576100f3565b80635f1b0fd81461022b5780636e04ff0d1461025657806391ad27b414610294578063c1c244e8146102bf576100f3565b80632cfcc539116100c65780632cfcc539146101a25780634585e33b146101ac578063473f1ddc146101d557806353a2c19a14610200576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632296888514610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610ccc565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610d5e565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f12565b6103e7565b005b34801561018357600080fd5b5061018c6104a7565b6040516101999190610ccc565b60405180910390f35b6101aa6104af565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610fc9565b61061e565b005b3480156101e157600080fd5b506101ea61080e565b6040516101f79190611057565b60405180910390f35b34801561020c57600080fd5b50610215610838565b6040516102229190610ccc565b60405180910390f35b34801561023757600080fd5b50610240610847565b60405161024d9190610ccc565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190611127565b610854565b60405161028b92919061120a565b60405180910390f35b3480156102a057600080fd5b506102a9610900565b6040516102b69190610ccc565b60405180910390f35b3480156102cb57600080fd5b506102d4610928565b6040516102e19190610ccc565b60405180910390f35b3480156102f657600080fd5b506102ff610932565b60405161030c9190610ccc565b60405180910390f35b34801561032157600080fd5b5061032a61093e565b604051610337919061125d565b60405180910390f35b34801561034c57600080fd5b5061036760048036038101906103629190611278565b610966565b6040516103749190611057565b60405180910390f35b34801561038957600080fd5b506103926109ad565b60405161039f9190610ccc565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104909291906112a5565b60405180910390fd5b6104a382826109b9565b5050565b600047905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610509576040517f046d209600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561051d5761051c610ce7565b5b600160149054906101000a900460ff16600181111561053f5761053e610ce7565b5b14610576576040517f5731c74000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061063860405180602001604052806000815250610854565b509050806106a75747600080549050600160149054906101000a900460ff16600181111561066957610668610ce7565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161069e939291906112ce565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106cc576106cb610ce7565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161079695949392919061135a565b6020604051808303816000875af11580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906113c2565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561086d5761086c610ce7565b5b600160149054906101000a900460ff16600181111561088f5761088e610ce7565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108c3919061141e565b119050600080600080549050119050600080471190508380156108e35750825b80156108ec5750815b80156108f55750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008080549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061097b5761097a611452565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109d4576109d3611452565b5b60200260200101516109e691906114b0565b905060008082815481106109fd576109fc611452565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9190611512565b60006040518083038185875af1925050503d8060008114610ace576040519150601f19603f3d011682016040523d82523d6000602084013e610ad3565b606091505b5050905080610b0e576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610b8e57610b8d610dcf565b5b604051908082528060200260200182016040528015610bbc5781602001602082028036833780820191505090505b5060009080519060200190610bd2929190610c0c565b506000600160146101000a81548160ff02191690836001811115610bf957610bf8610ce7565b5b0217905550426002819055505050505050565b828054828255906000526020600020908101928215610c85579160200282015b82811115610c845782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c2c565b5b509050610c929190610c96565b5090565b5b80821115610caf576000816000905550600101610c97565b5090565b6000819050919050565b610cc681610cb3565b82525050565b6000602082019050610ce16000830184610cbd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d2757610d26610ce7565b5b50565b6000819050610d3882610d16565b919050565b6000610d4882610d2a565b9050919050565b610d5881610d3d565b82525050565b6000602082019050610d736000830184610d4f565b92915050565b6000604051905090565b600080fd5b600080fd5b610d9681610cb3565b8114610da157600080fd5b50565b600081359050610db381610d8d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0782610dbe565b810181811067ffffffffffffffff82111715610e2657610e25610dcf565b5b80604052505050565b6000610e39610d79565b9050610e458282610dfe565b919050565b600067ffffffffffffffff821115610e6557610e64610dcf565b5b602082029050602081019050919050565b600080fd5b6000610e8e610e8984610e4a565b610e2f565b90508083825260208201905060208402830185811115610eb157610eb0610e76565b5b835b81811015610eda5780610ec68882610da4565b845260208401935050602081019050610eb3565b5050509392505050565b600082601f830112610ef957610ef8610db9565b5b8135610f09848260208601610e7b565b91505092915050565b60008060408385031215610f2957610f28610d83565b5b6000610f3785828601610da4565b925050602083013567ffffffffffffffff811115610f5857610f57610d88565b5b610f6485828601610ee4565b9150509250929050565b600080fd5b60008083601f840112610f8957610f88610db9565b5b8235905067ffffffffffffffff811115610fa657610fa5610f6e565b5b602083019150836001820283011115610fc257610fc1610e76565b5b9250929050565b60008060208385031215610fe057610fdf610d83565b5b600083013567ffffffffffffffff811115610ffe57610ffd610d88565b5b61100a85828601610f73565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061104182611016565b9050919050565b61105181611036565b82525050565b600060208201905061106c6000830184611048565b92915050565b600080fd5b600067ffffffffffffffff82111561109257611091610dcf565b5b61109b82610dbe565b9050602081019050919050565b82818337600083830152505050565b60006110ca6110c584611077565b610e2f565b9050828152602081018484840111156110e6576110e5611072565b5b6110f18482856110a8565b509392505050565b600082601f83011261110e5761110d610db9565b5b813561111e8482602086016110b7565b91505092915050565b60006020828403121561113d5761113c610d83565b5b600082013567ffffffffffffffff81111561115b5761115a610d88565b5b611167848285016110f9565b91505092915050565b60008115159050919050565b61118581611170565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111c55780820151818401526020810190506111aa565b60008484015250505050565b60006111dc8261118b565b6111e68185611196565b93506111f68185602086016111a7565b6111ff81610dbe565b840191505092915050565b600060408201905061121f600083018561117c565b818103602083015261123181846111d1565b90509392505050565b600067ffffffffffffffff82169050919050565b6112578161123a565b82525050565b6000602082019050611272600083018461124e565b92915050565b60006020828403121561128e5761128d610d83565b5b600061129c84828501610da4565b91505092915050565b60006040820190506112ba6000830185611048565b6112c76020830184611048565b9392505050565b60006060820190506112e36000830186610cbd565b6112f06020830185610cbd565b6112fd6040830184610cbd565b949350505050565b6000819050919050565b61131881611305565b82525050565b600061ffff82169050919050565b6113358161131e565b82525050565b600063ffffffff82169050919050565b6113548161133b565b82525050565b600060a08201905061136f600083018861130f565b61137c602083018761124e565b611389604083018661132c565b611396606083018561134b565b6113a3608083018461134b565b9695505050505050565b6000815190506113bc81610d8d565b92915050565b6000602082840312156113d8576113d7610d83565b5b60006113e6848285016113ad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142982610cb3565b915061143483610cb3565b925082820390508181111561144c5761144b6113ef565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114bb82610cb3565b91506114c683610cb3565b9250826114d6576114d5611481565b5b828206905092915050565b600081905092915050565b50565b60006114fc6000836114e1565b9150611507826114ec565b600082019050919050565b600061151d826114ef565b915081905091905056fea2646970667358221220d1f9505efb6e9247ec83cfe6440e549de852562bb2bb3a036dbc97609e43777264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that chainlink keeper nodes call... they look for the 'upkeepNeeded' to return true. following shoold be true in order to true: 1. Time interval passed. 2. at least 1 player 3. subscription is funded with LINK 4. Lottery shold be in open state."
      }
    },
    "title": "A sample of Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)203"
      },
      {
        "astId": 230,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)203": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}